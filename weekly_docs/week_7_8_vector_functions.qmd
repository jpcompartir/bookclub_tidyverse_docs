---
title: "vector functions"
format: html
editor: visual
---

vector functions are applied only on vectors unlike previous functions which were applied on dataframes.

## between()

Detect where the values fall in a specific range. Its takes 3 arguments

```         
between(vector, left range value, right range value)
```

```{r}
library(dplyr)
library(tidyverse)

example_vector <- c(2:7)

between(example_vector, 5,6)
```

we can also apply on a vector in a dataframe

```{r}
filter(mtcars, between(cyl, 4, 6))
```

similarly we can use the base r filtering like

```{r}
example_vector[between(example_vector,4,6)]
```

note range includes the starting and ending number just like range function.

## case_match() and case_when()

This is R's equivalent of CASE WHEN in SQL

Similar syntax to popular `case_when` with only difference is we don't have to put logical vectors.

```{r eval=F}
case_when(
  x %in% c("a", "b") ~ 1,
  x %in% "c" ~ 2,
  x %in% c("d", "e") ~ 3
)

case_match(
  x,
  c("a", "b") ~ 1,
  "c" ~ 2,
  c("d", "e") ~ 3
)
```

case_when is converting a ,b to 1 in vector x, similarly for c etc.

in case_when we have to define vector name at each step while case_match doesn't require it.

```{r}
#case when example 
mtcars %>% select(cyl) %>% mutate(new_cyl = case_when(cyl == 4 ~ '4 cylinders', cyl == 6 ~ '6 cylinders', TRUE ~ as.character(cyl)))


                  
#case match example 
mtcars %>% select(cyl) %>% mutate(new_cyl = case_match(cyl 4~ '4 cylinders', 6 ~'6 cyclinders'))
```

case_match only works on 1 vector

lets do operations on starwars dataset

```{r}
starwars
```

```{r}
starwars %>%
  select( species) %>%
  mutate(
    type = case_match(
      species, "Droid" ~ "robot",
      .default = species
    )
  )
```

we can put multiple case_match to solve this problem

```{r}
starwars %>%
  mutate(
    # Replace missings, but leave everything else alone
    hair_color = case_match(hair_color, NA ~ as.character(1), .default = hair_color),
    # Replace some, but not all, of the species
    species = case_match(
      species,
      "Human" ~ "Humanoid",
      "Droid" ~ "Robot",
      c("Wookiee", "Ewok") ~ "Hairy",
      .default = species
    ),
    .keep = "used"
  )
```

in above example we are changing NA values to "unknown" in hair_color column in first case_match and in 2nd case_match we are performing multiple operations on species column.

We can put NA values as well

```{r}
starwars %>% select(height) %>% mutate(new_height = case_match(height, 172~ 172*4 , 167 ~167*4,NA~0,.default = height))
```

we cannot do operations in the dynamic formulas in case_match unlike case_when

using case_when with more arguments with logical operations

```{r}
starwars %>%
  select(name:mass, gender, species) %>%
  mutate(
    type = case_when(
      height > 200 | mass > 200 ~ "large",
      species == "Zabrak" &
      gender != 'feminine' ~ "robot",
      TRUE ~ as.character("other"),
      is.na(height)~"none"
    )
  )
```

**.default**

:   The value used when all of the LHS inputs return either `FALSE` or `NA`.

if we don't use .default argument it will produce NaNs

```{r}
starwars %>%
  select(name:mass, gender, species) %>%
  mutate(
    type = case_when(
      height < 200 ~ '300',
      is.na(height)~"other"
    )
  ) %>% count(type)
```

another way of using case_when is with the help of a custom function.

```{r}

# `case_when()` is not a tidy eval function. If you'd like to reuse
# the same patterns, extract the `case_when()` call in a normal
# function:
case_character_type <- function(height, mass, species) {
  case_when(
    height > 200 | mass > 200 ~ "large",
    species == "Droid" ~ "robot",
    .default = "other"
  )
}


case_character_type(150, 250, "Droid")
```

there is another argument .ptype which deals with output of the these two vector functions.

```{r}

starwars %>%
  select(name:mass, gender, species) %>%
  mutate(
    type = case_when(
      height > 200 | mass > 200 ~ "large",
      species == "Zabrak" & gender != 'feminine' ~ "robot",
      .ptype=factor(levels=c("large","robot"))
    )
  ) 

```

## coalesce()

finds the first non-missing values at each position

replacing NA values with 'red' in hair_color column

```{r}
coalesce(starwars$hair_color, "red")
```

using coalesce to combine two vectors which have missing values.

```{r}
unique(starwars$hair_color)
```

```{r}
unique(starwars$species)
```

```{r}

x <- coalesce(starwars$hair_color, starwars$species,.ptype = as.character())
x
str(x)
```

to compare the na values in different vectors we can use following. It is keeping first non-missing value only.

```{r}
vect1 <- c(3,3,NA,1,NA,NA)
vect2 <- c(4,NA,7,8,9,NA)
vect3 <- c(3,NA,1,NA,2,2)
coalesce(vect1,vect2,vect3)
```

note that vectors should be of same size

## consective_id()

`consecutive_id()` generates a unique identifier that increments every time a variable (or combination of variables) changes.

accepts 1 argument

... Unnamed vectors. If multiple vectors are supplied, then they should have the same length.

lets take example of hair color column

```{r}
starwars$hair_color
```

```{r}
starwars %>% select(hair_color) %>% consecutive_id(.)
```

each unique value in hair_color column is given a value by consective_id

Now lets try with multiple vectors

```{r}
starwars %>% group_by(id = consecutive_id(hair_color,eye_color), hair_color,eye_color) %>% select(id,hair_color,eye_color) 
```

value in the id column change when combination of two column changes. for example when id=32, other two columns have values 'orange' and 'none'. Value of id in next two rows doesn't change since combination remains same in other two columns.

## cumall(x), cumany(x), cummean(x)

For `cumall()` and `cumany()`, a logical vector; for `cummean()` an integer or numeric vector.

*dplyr::cumany* computes the cumulative logical OR of a vector or column of a data frame. It returns a logical vector of the same length as the input vector, where each element is the result of applying the **OR operator t**o all the preceding elements in the vector.

```{r}
starwars$height
```

```{r}
cumany(starwars$height <170)
```

operation is summing up previous values to new value and returning a logical vector.

It can help to filter rows based on logical values.

```{r}
starwars %>% filter(cumany(starwars$height < 170))
```

-   cumall returns logical vector like cumany()

*dplyr::cumall* computes the cumulative logical AND of a vector or column of a data frame. It returns a **logical vector of the same length as the input vector,** where each element is the result of applying the **AND operator** to all the preceding elements in the vector.

```{r}
cumall(starwars$height < 170)
```

```{r}
starwars %>% filter(cumall(starwars$height < 170))
```

*dplyr::cummean* computes the cumulative mean of a vector or column of a data frame. It returns a numeric vector of the same length as the input vector, where **each element is the average of all the preceding elements in the vector, including the current element.**

```{r}
cummean(starwars$height)

```

## desc()

Transform a vector into a format that will be sorted in descending order. This is useful within [`arrange()`](https://dplyr.tidyverse.org/reference/arrange.html).

```{r}
starwars %>% arrange(desc(mass)) %>% pull(mass)
```

## if_else()

`if_else()` is a vectorized [if-else](https://rdrr.io/r/base/Control.html). Compared to the base R equivalent, [`ifelse()`](https://rdrr.io/r/base/ifelse.html), this function allows you to handle missing values in the `condition` with `missing` and always takes `true`, `false`, and `missing` into account when determining what the output type should be.

```         
if_else(condition, true, false, missing = NULL, ..., ptype = NULL, size = NULL)
```

```{r}
starwars %>%
  mutate(category = if_else(height < 100, "short", "tall"), .keep = "used")
```

```{r}
# Explicitly handle `NA` values in the `condition` with `missing`
starwars %>%
  mutate(category = if_else(height >170, 1, 3, missing = 456), .keep = "used")
```

```{r}
# Unlike `ifelse()`, `if_else()` preserves types
x <- factor(sample(letters[1:5], 10, replace = TRUE))
ifelse(x %in% c("a", "b", "c"), x, NA)
```

```{r}
if_else(x %in% c("a", "b", "c"), x, NA)
```

## lag(), lead()

Find the "previous" (`lag()`) or "next" (`lead()`) values in a vector. Useful for comparing values behind of or ahead of the current values.

```         
lag(x, n = 1L, default = NULL, order_by = NULL, ...)

lead(x, n = 1L, default = NULL, order_by = NULL, ...)
```

n = number of positions to lag or lead

x = vector

**order_by**

:   An optional secondary vector that defines the ordering to use when applying the lag or lead to `x`. If supplied, this must be the same size as `x`.

```{r}
tibble(behind = lag(starwars$height,4), starwars$height, ahead=lead(starwars$height,4))
```

to add a pad value before lag

```{r}
lag(head(starwars$height), default = 2)
```

similarly for lead

```{r}
lead(head(starwars$height), default = 0)
```

first value is deleted in this case for lead

-   using the order_by to supply a vector

```{r}
tibble(behind = lag(starwars$height,1,order_by = starwars$birth_year), starwars$height,starwars$birth_year) 
```

## n_distinct()

counts the number of unique/distinct combinations in a set of one or more vectors. It's a faster and more concise equivalent to `nrow(unique(data.frame(...)))`

Accepts Unnamed vectors. If multiple vectors are supplied, then they should have the same length.

```{r}
n_distinct(starwars$height)
```

```{r}
n_distinct(starwars$height, starwars$hair_color)
```

there are 68 distinct values in both vectors.

## na_if()

It is useful if you want to convert an annoying value to `NA`.

```         
na_if(x, y)

x= vector to modify
y= Value or vector to compare against.
```

```{r}

na_if(head(starwars$height), 172)
```

value 172 has become NA

```{r}
# `na_if()` allows you to replace `NaN` with `NA`,
# even though `NaN == NaN` returns `NA`
z <- c(1, NaN, NA, 2, NaN)
na_if(z, NaN)
```

similarly we can replace empty spaces, values like 'inf' with NA.

## near()

This is a safe way of comparing if two vectors of floating point numbers are (pairwise) equal. This is safer than using `==`, because it has a built in tolerance

```{r}
near(sqrt(2) ^ 2, 2)
```

```{r}
near(starwars$height, starwars$height*2,tol = .Machine$double.eps^10 )
```

we can use

```         
tol = .Machine$double.eps^0.5
```

for giving tolerance in the comparison of values. It is the desired accuracy.

## nth(), first() and last()

: Extract the first, last, or nth value from a vector

```{r}
# returns 11th value
nth(starwars$height, 11)
```

```{r}
first(starwars$height)
```

```{r}
# select first row 
first(starwars)
```

```{r}
last(starwars$name)
```

```{r}
# second last row
nth(starwars$height,-2)
```

## ntile()

Bucket a numerical vector into n groups

`ntile()` is a sort of very rough rank, which breaks the input vector into `n` buckets. If `length(vector)` is not an integer multiple of `n`, the size of the buckets will differ by up to one, with larger buckets coming first.

Unlike other ranking functions, `ntile()` ignores ties: it will create evenly sized buckets even if the same value of vector ends up in different buckets.

Here buckets n=3

```{r}
ntile(starwars$height,3)
```

By default, the smallest values will get the smallest ranks.

Missing values will be given rank `NA`.

## order_by()

A helper function for ordering **window function output**

Accepts a function call to a window function, where the first argument is the vector being operated on

```{r}
x <- 10:1
y <- 1:10
order_by(x, cumsum(y))
```

## percent_rank() and cume_dist()

To compute percentile. For x_i (each element) in x vector

-   `cume_dist(x)` counts the total number of values less than or equal to `x_i`, and divides it by the number of observations.

-   `percent_rank(x)` counts the total number of values less than `x_i`, and divides it by the number of observations minus 1.

-   The result is a numeric vector of percent ranks ranging from 0 to 1, where 0 represents the lowest value and 1 represents the highest value.

    ```{r}
    head(starwars$height)
    ```

```{r}
cume_dist(head(starwars$height))
```

```{r}
percent_rank(head(starwars$height))
```

```{r}
sapply(head(starwars$height), function(xi) sum(head(starwars$height) < xi)  / (length(head(starwars$height)) - 1))

```

## recode() and recode_factor()

recode() is superseded by case_match

```         
# `recode_factor()` does not currently have a direct replacement, but we
# plan to add one to forcats. In the meantime, you can use the `.ptype`
# argument to `case_match()`.
```

```{r}
num_vec <- c(1:4, NA)

case_match(
  num_vec,
  1 ~ "z",
  2 ~ "y",
  3 ~ "x",
  NA ~ "M",
  .default = "D",
  .ptype = factor(levels = c("z", "y", "x", "D", "M"))
)
```

```{r}
case_match(
  starwars$sex,
  "male" ~ "Male",
  "female" ~ "Female",
  "none" ~ "unkown",
  NA ~ "M",
  .default = "D",
  .ptype = factor(levels = c("Male", "Female", "unkown", "D", "M"))
)
```

## Row_number(), min_rank() , dense_rank()

-   `row_number()` gives every input a unique rank, so that `c(10, 20, 20, 30)` would get ranks `c(1, 2, 3, 4)`. It's equivalent to `rank(ties.method = "first")`.

-   `min_rank()` gives every tie the same (smallest) value so that `c(10, 20, 20, 30)` gets ranks `c(1, 2, 2, 4)`. It's the way that ranks are usually computed in sports and is equivalent to `rank(ties.method = "min")`.

-   `dense_rank()` works like `min_rank()`, but doesn't leave any gaps, so that `c(10, 20, 20, 30)` gets ranks `c(1, 2, 2, 3)`.

-   the "ties" refer to situations where two or more values in a vector are identical and cannot be distinguished in terms of their rank. When calculating ranks, there are different ways to handle ties, and the behavior can be controlled using the **`ties.method`** parameter in the **`rank()`** function. The **`ties.method`** parameter accepts three possible values:

    1.  **`"average"`** (default): Ties are assigned the average rank. For example, if two values tie for the second rank, both will be assigned a rank of 2.5, and the next value will be assigned a rank of 4.

    2.  **`"first"`**: Ties are assigned the smallest rank. For example, if two values tie for the second rank, both will be assigned a rank of 2, and the next value will be assigned a rank of 4.

    3.  **`"last"`**: Ties are assigned the largest rank. For example, if two values tie for the second rank, both will be assigned a rank of 3, and the next value will be assigned a rank of 4.

    ```{r}

    # Create a vector with tied values
    vec <- c(10, 20, 30, 30, 40)

    # Calculate ranks with different ties.method values
    df <- data.frame(
      value = vec,
      average_rank = rank(vec, ties.method = "average"),
      first_rank = rank(vec, ties.method = "first"),
      last_rank = rank(vec, ties.method = "last")
    )

    print(df)

    ```

```{r}
x <- c(50, 10, 30, 20, 20, NA)

row_number(x)

min_rank(x)

dense_rank(x)
```

To get one row per group.

```{r}
starwars %>% group_by(sex) %>% filter(row_number(birth_year) == 1) %>% select(birth_year)
```

```{r}
# May give more than 1 row if ties
starwars %>% group_by(sex) %>% filter(min_rank(birth_year) == 10)  %>% select(birth_year)
```

```         
Rank by multiple columns (to break ties) by selecting them with `pick()`
```

```{r}
starwars %>% group_by(sex) %>% filter(min_rank(pick(birth_year,height)) == 1) %>% select(birth_year,height)
```
